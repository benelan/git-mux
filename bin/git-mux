#!/usr/bin/env sh
set -e

# A git + tmux (or wezterm) lovechild for blazingly fast movement between projects and tasks
# Source: https://github.com/benelan/gh-fzf
#
# MIT License
#
# Copyright (c) Ben Elan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

GIT_MUX_VERSION="0.3.0" # x-release-please-version

# Configuration                                                         {{{
# --------------------------------------------------------------------- {|}

has() { command -v "$1" >/dev/null 2>&1; }

if [ -z "$GIT_MUX_SELECT_CMD" ] && ! has fzf; then
    printf "%s\n%s\n\n%s\n" \
        "Error: install fzf or specify a different method for" \
        "selection with the GIT_MUX_SELECT_CMD environment variable." \
        "See the ENVIRONMENT section of \`man git mux\` for details." >&2
    exit 1
fi

GIT_MUX_SELECT_CMD=${GIT_MUX_SELECT_CMD:-fzf}

if [ -z "$GIT_MUX_PROJECTS" ] && [ -z "$GIT_MUX_PROJECT_PARENTS" ]; then
    printf "%s\n%s\n\n%s\n%s\n" \
        "Error: missing required environment variable(s) for specifying your" \
        "project directories: \`GIT_MUX_PROJECTS\` and/or \`GIT_MUX_PROJECT_PARENTS\`." \
        "See the Configuration section of \`git mux -h\` for a concise description," \
        "or the ENVIRONMENT section of \`man git mux\` for more detail." >&2
    exit 1
fi

GIT_MUX_ALL_PROJECTS="${GIT_MUX_PROJECTS} $(
    # The following mess is a compliant solution to:
    # $ find $GIT_MUX_PROJECT_PARENTS -maxdepth 1 -mindepth 1 -type d
    for project_parent_dir in ${GIT_MUX_PROJECT_PARENTS:-$PROJECTS}; do
        for project_dir in "$project_parent_dir"/*; do
            if [ -d "$project_dir" ]; then
                printf "%s " "$project_dir"
            fi
        done
    done
)"

if [ "$GIT_MUX_LOGS" = "1" ]; then
    GIT_MUX_LOGS="${XDG_STATE_HOME:-$HOME/.local/state}/git-mux/logs"
    mkdir -p "$(dirname "$GIT_MUX_LOGS")"
fi

# --------------------------------------------------------------------- }}}
# Usage info and logs                                                   {{{
# --------------------------------------------------------------------- {|}

usage="Usage:
  git mux clone <repository> [<directory>]
  git mux project [<directory>]
  git mux task [<branch>] [<window>]
  git mux task <directory> [<window>] [<command>...]"

error() {
    if [ -n "$1" ]; then
        log "ERROR" "$*"
        printf "Error: %s\n" "$*" >&2
    fi
    printf "\n%s\n\n%s\n" \
        "$usage" \
        "Try -h for a concise description or --help for more detail." >&2
    exit 1
}

help() {
    printf "
A git + tmux lovechild for blazingly fast movement between projects and tasks.

Homepage: https://github.com/benelan/git-mux

%s

Commands:
    c, clone    Clone and configure a bare git repo for use with worktrees
    p, project  Create and/or switch to a project (tmux session|wezterm workspace)
                Projects are usually a git repo, but any directory is valid
    t, task     Create, switch, or send text to a task (tmux window|wezterm tab)
                Tasks are usually a git worktree or branch (not required)
    h, help     Show a concise help message or the man page, respectively

Configuration:
    See the ENVIRONMENT section of \`man git mux\` for all options. At least one
    of the following environment variables is required to set the project paths.
    The paths must be absolute or start with '~' and cannot contain spaces.

    GIT_MUX_PROJECTS
        Space delimited list of individual project directories for fuzzy selection.

    GIT_MUX_PROJECT_PARENTS
        Space delimited list of directories that contain projects. The immediate
        child directories (depth=1) of each parent are used for fuzzy selection.

Examples:
    # Select a project then create and/or switch to its session or workspace.
    git mux p

    # Create and/or switch to a project directly (useful for a keymap/alias).
    git mux project ~/dev/work/acme-app

    # Create and/or switch to a task (window or tab) named \"123\" via basename(1).
    # Start the task in \"feature/123\" if it is a valid directory.
    # Otherwise assume it is a git branch name. Create and/or switch to the
    # git worktree if the project is a bare repo, otherwise checkout the branch.
    git mux task feature/123

    # Select an existing branch for the task (using fzf by default).
    git mux t

    # Run commands in a window or tab named 'tests' without switching to it.
    git mux task packages/cli tests npm i && npm test
" "$usage" >&2
    exit 0
}

# @internal
config_values() {
    cat >&2 <<EOF
========= @internal: all projects =========
$GIT_MUX_ALL_PROJECTS

========= GIT_MUX_PROJECT_PARENTS =========
$GIT_MUX_PROJECT_PARENTS

========= GIT_MUX_PROJECTS =========
$GIT_MUX_PROJECTS

========= GIT_MUX_SELECT_CMD =========
$GIT_MUX_SELECT_CMD

========= GIT_MUX_NEW_SESSION_CMD =========
$GIT_MUX_NEW_SESSION_CMD

========= GIT_MUX_NEW_WORKTREE_CMD =========
$GIT_MUX_NEW_WORKTREE_CMD

========= GIT_MUX_BRANCH_PREFIX =========
$GIT_MUX_BRANCH_PREFIX

========= GIT_MUX_BRANCH_FILTER =========
$GIT_MUX_BRANCH_FILTER

========= GIT_MUX_LOGS =========
$GIT_MUX_LOGS

========= GIT_MUX_LOG_LEVEL =========
$GIT_MUX_LOG_LEVEL
EOF
}

has_log_level() {
    case "$GIT_MUX_LOG_LEVEL" in
        DEBUG*) test "$1" -gt 0 && return 1 ;;
        INFO*) test "$1" -gt 1 && return 1 ;;
        WARN*) test "$1" -gt 2 && return 1 ;;
        ERROR*) test "$1" -gt 3 && return 1 ;;
        *) error "invalid GIT_MUX_LOG_LEVEL value: $GIT_MUX_LOG_LEVEL" ;;
    esac
    return 0
}

logged_newline=""
log() {
    if [ -n "$GIT_MUX_LOGS" ] && [ "$GIT_MUX_LOGS" != "0" ]; then
        if [ -z "$1" ]; then
            printf "\n" >>"$GIT_MUX_LOGS"
            return 0
        fi

        if [ -n "$GIT_MUX_LOG_LEVEL" ]; then
            case "$1" in
                DEBUG) has_log_level 1 && return 0 ;;
                INFO*) has_log_level 2 && return 0 ;;
                WARN*) has_log_level 3 && return 0 ;;
                ERROR) has_log_level 4 && return 0 ;;
                *) error "invalid log level: $1" ;;
            esac
        fi

        if [ -z "$logged_newline" ]; then
            printf "\n" >>"$GIT_MUX_LOGS"
            logged_newline="1"
        fi

        printf "%s | %s | %s\n" \
            "$1" \
            "$(date +%Y-%m-%dT%H:%M:%S 2>/dev/null)" \
            "$2" \
            >>"$GIT_MUX_LOGS"
    fi
}

# --------------------------------------------------------------------- }}}
# Util functions                                                        {{{
# --------------------------------------------------------------------- {|}

arg_is_flag() { case $1 in -*) true ;; *) false ;; esac }

absolute_path() { [ -d "$1" ] && cd "$1" && echo "$PWD"; }

sanitize_name() { basename "$1" | tr "./" "__"; }

stdin_is_a_tty() { [ -t 0 ]; }

is_git_work_tree_root() {
    [ "$(git -C "${1:-$PWD}" rev-parse --is-inside-work-tree)" = "true" ] &&
        [ "$(git -C "${1:-$PWD}" rev-parse --show-toplevel)" = "${1:-$PWD}" ]
}

is_git_bare_repo_root() {
    git_dir="$(git -C "${1:-$PWD}" rev-parse --path-format=relative --git-dir)"
    [ "$(git -C "${1:-$PWD}" rev-parse --is-bare-repository)" = "true" ] &&
        [ "${git_dir#*"/"}" = "$git_dir" ]
}

is_git_root_dir() {
    is_git_work_tree_root "${1:-$PWD}" || is_git_bare_repo_root "${1:-$PWD}"
}

# tmux utils from https://github.com/thoughtbot/dotfiles/blob/main/bin/tat

tmux_session_exists() { tmux has-session -t "=$1" >/dev/null 2>&1; }

in_tmux() { [ -n "$TMUX" ]; }

has_tmux_server() { tmux run 2>/dev/null; }

# if in wezterm and not attached to tmux, the default is to use wezterm for
# multiplexing. This can be overridden by setting GIT_MUX_MULTIPLEXER="tmux".
# Set GIT_MUX_MULTIPLEXER="wezterm" to use wezterm even whena attached to tmux.
use_wezterm() {
    has wezterm && [ -n "$WEZTERM_PANE" ] && [ "$GIT_MUX_MULTIPLEXER" != "tmux" ] &&
        ([ "$GIT_MUX_MULTIPLEXER" = "wezterm" ] || ! in_tmux)
}

# https://github.com/wez/wezterm/blob/main/assets/shell-integration/wezterm.sh
# This function emits an OSC 1337 sequence to set a user var associated with
# the current terminal pane. It requires the `base64` utility to be available
# in the path.
wezterm_set_user_var() {
    if hash base64 2>/dev/null; then
        if [ -z "${TMUX}" ]; then
            printf "\033]1337;SetUserVar=%s=%s\007" "$1" "$(echo "$2" | base64)"
        else
            # <https://github.com/tmux/tmux/wiki/FAQ#what-is-the-passthrough-escape-sequence-and-how-do-i-use-it>
            # Note that you ALSO need to add "set -g allow-passthrough on" to your tmux.conf
            printf "\033Ptmux;\033\033]1337;SetUserVar=%s=%s\007\033\\" "$1" "$(echo "$2" | base64)"
        fi
    fi
}

# --------------------------------------------------------------------- }}}
# Clone command                                                         {{{
# --------------------------------------------------------------------- {|}

# Clones a bare repo for use with git-worktree and creates an
# initial worktree for the repo's default branch.
# https://git-scm.com/docs/git-worktree
bare_clone() {
    if arg_is_flag "$1" || arg_is_flag "$2"; then
        error "clone > invalid argument(s): \"$*\""
    fi

    new_repo_dir="${2:-"$(basename "$1" .git)"}"
    mkdir -p "$new_repo_dir"
    cd "$new_repo_dir" || return

    log "INFO " "clone > cloning bare repo for \"$1\" in \"$PWD\""
    git clone --bare "$1" .git >&2
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" >&2
    git fetch origin >&2

    new_worktree="$(git rev-parse --abbrev-ref HEAD)"
    if [ -n "$new_worktree" ]; then
        log "INFO " "clone > creating worktree for HEAD branch: $new_worktree"
        git worktree add "$(sanitize_name "$new_worktree")" "$new_worktree" >&2

        cd "$new_worktree" || return
    fi

    unset new_repo_dir new_worktree
}

# --------------------------------------------------------------------- }}}
# Project command                                                       {{{
# --------------------------------------------------------------------- {|}

project_create_if_needed_and_attach() {
    project_path="${1:-$PWD}"
    project_name="$(sanitize_name "$project_path")"
    project_info="\"$project_name\" at path \"$project_path\""

    if ! tmux_session_exists "$project_name"; then
        log "INFO " "project > creating $project_info"
        tmux new-session -Adc "$project_path" -s "$project_name"

        if [ -n "$GIT_MUX_NEW_SESSION_CMD" ]; then
            log "INFO " "project > executing new tmux session command: \"$GIT_MUX_NEW_SESSION_CMD\""
            tmux send-keys -t "$project_name" "$GIT_MUX_NEW_SESSION_CMD" Enter
        fi
    fi

    if in_tmux; then
        log "INFO " "project > switching to $project_info"
        tmux switch-client -t "$project_name"
    else
        log "INFO " "project > attaching to $project_info"
        tmux attach-session -t "$project_name"
    fi

    unset project_path project_name project_info
}

# See `man git mux` for details on the following environment variables.
# shellcheck disable=2086
select_project() { printf "%s\n" $GIT_MUX_ALL_PROJECTS | $GIT_MUX_SELECT_CMD; }

# If the arg1 is a valid path, it is used for the project.
# Otherwise select a project from the directories added to the config.
handle_project() {
    if arg_is_flag "$1"; then
        error "project > invalid first argument, it must be a path to a project: \"$1\""
    fi

    if [ -n "$1" ] && [ -d "$1" ]; then
        log "DEBUG" "project > valid path provided: \"$1\""

        if use_wezterm; then
            wezterm_set_user_var git-mux "project $(absolute_path "$1")"
        else
            project_create_if_needed_and_attach "$(absolute_path "$1")"
        fi
    else
        log "DEBUG" "project > a valid path was not provided, interactively selecting a project"

        if use_wezterm && ! stdin_is_a_tty; then
            # Use use Wezterm's builtin InputSelector if stdin is not a tty.
            # https://wezfurlong.org/wezterm/config/lua/keyassignment/InputSelector.html?h=input
            wezterm_set_user_var git-mux project
            exit 0
        fi

        selected_project="$(select_project)"
        selection_exit_code=$?

        if [ $selection_exit_code -ne 0 ] || [ -z "$selected_project" ]; then
            log "WARN" "project > selection was canceled or failed"
            exit $selection_exit_code
        fi

        if use_wezterm; then
            wezterm_set_user_var git-mux "project $selected_project"
        else
            project_create_if_needed_and_attach "$selected_project"
        fi
    fi
}

# --------------------------------------------------------------------- }}}
# Task command                                                          {{{
# --------------------------------------------------------------------- {|}

# Determines the absolute path of the selected or provided project.
find_project_directory() {
    log "DEBUG" "task > checking project names for a match with the tmux session: \"$GIT_MUX_CURRENT_PROJECT\""
    # check if the tmux session name is one of the projects
    for project in $GIT_MUX_ALL_PROJECTS; do
        if [ "$(
            sanitize_name "$(basename "$project")"
        )" = "$GIT_MUX_CURRENT_PROJECT" ]; then
            log "DEBUG" "task > found a matching project: \"$project\""
            echo "$project"

            unset project
            return
        fi
    done

    log "WARN " "task > no matching project found"
    if [ "$(sanitize_name "$(basename ~)")" = "$GIT_MUX_CURRENT_PROJECT" ]; then
        log "DEBUG" "task > currently in home session, interactively selecting a project"
        select_project && return
    else
        log "DEBUG" "task > using current directory as project: \"$PWD\""
        pwd
    fi
}

# Use $GIT_MUX_SELECT_CMD to select an existing git branch for creating a task.
select_branch() {
    # branches are ordered by commit date, so don't re-sort with fzf
    if [ "$GIT_MUX_SELECT_CMD" = "fzf" ]; then
        GIT_MUX_SELECT_CMD="fzf --no-sort"
    fi

    # remote and local branches sorted by commit date
    git for-each-ref refs/remotes refs/heads \
        --sort=-committerdate --format='%(refname:short)' |
        # filter by string, remove 'origin/' prefix, dedupe, select branch
        awk '/'"$GIT_MUX_BRANCH_FILTER"'/{gsub("^origin/(HEAD)?","")};!x[$0]++' |
        $GIT_MUX_SELECT_CMD
}

# Attaches/switches to a tmux window. If the next argument is a valid path,
# the window is created in that directory. If there are arguments after the
# path, the following one is used as the tmux window name. The rest of the
# arguments are sent to the window and executed instead of attaching/switching.
# This allows you to execute commands in the background and continue working.
#
#
# If the initial argument isn't a valid path it is treated a a git branch and
# creates/switches to a corresponding git worktree (when relevant). If no
# argument is provided it prompts to select an existing branch.
handle_task() {
    if arg_is_flag "$1" || arg_is_flag "$2"; then
        error "task > invalid argument(s): \"$*\""
    fi
    log "DEBUG" "task > args: $*"

    if ! use_wezterm && ! has_tmux_server; then
        error "task > tmux server not found. Make sure a project is open before selecting a task."
    fi

    if use_wezterm; then
        GIT_MUX_CURRENT_PROJECT="$(wezterm cli list |
            awk -v pane="$WEZTERM_PANE" '$3 == pane {print $4}')"
    else
        GIT_MUX_CURRENT_PROJECT="$(tmux display-message -p "#S")"
    fi

    # Use arg1 for the task if it is a valid directory.
    # Otherwise assume it is a git branch name.
    if [ -n "$1" ] && [ -d "$1" ]; then
        if use_wezterm; then
            handle_wezterm_task "$@"
        else
            handle_tmux_task "$@"
        fi
    else
        handle_git_task "$@"
    fi
}

handle_wezterm_task() {
    task_dir="$(absolute_path "$1")"
    task_name="${2:-"$(sanitize_name "$task_dir")"}"
    task_data="$(
        wezterm cli list --format json |
            jq ".[] | select(
                .tab_title==\"$task_name\" and
                .workspace==\"$GIT_MUX_CURRENT_PROJECT\"
            )"
    )"

    if [ -z "$task_data" ]; then
        pane_id="$(wezterm cli spawn --cwd "$task_dir")"
        wezterm cli set-tab-title --pane-id "$pane_id" "$task_name"
    else
        pane_id=$(echo "$task_data" | jq -r "select(.is_active==true) | .pane_id")
    fi

    # if provided, execute commands in the mux tab for new worktrees
    if [ -n "$GIT_MUX_NEW_WORKTREE" ] && [ -n "$GIT_MUX_NEW_WORKTREE_CMD" ]; then
        log "INFO " "task > executing new git worktree command: \"$GIT_MUX_NEW_WORKTREE_CMD\""
        wezterm cli send-text --no-paste --pane-id "$pane_id" "$GIT_MUX_NEW_WORKTREE_CMD
        "
        unset GIT_MUX_NEW_WORKTREE
    fi

    if [ -n "$3" ]; then
        shift 2
        log "INFO " "task > executing command (not activating wezterm tab): \"$*\""
        wezterm cli send-text --no-paste --pane-id "$pane_id" "$*
        "
    else
        wezterm cli activate-pane --pane-id "$pane_id"
    fi

    unset task_name task_dir
}

handle_tmux_task() {
    task_dir="$(absolute_path "$1")"
    task_name="${2:-"$(sanitize_name "$task_dir")"}"

    # Not using new-window's -S flag for backwards compatibility
    if ! tmux list-windows | grep -q "$task_name"; then
        log "INFO " "task > creating new \"$task_name\" task in \"$task_dir\""
        tmux new-window -dn "$task_name" -c "$task_dir"
    fi

    # if provided, execute commands in the tmux window for new worktrees
    if [ -n "$GIT_MUX_NEW_WORKTREE" ] && [ -n "$GIT_MUX_NEW_WORKTREE_CMD" ]; then
        log "INFO " "task > executing new git worktree command: \"$GIT_MUX_NEW_WORKTREE_CMD\""
        tmux send-keys -t "$GIT_MUX_CURRENT_PROJECT:$task_name" "$GIT_MUX_NEW_WORKTREE_CMD" Enter
        unset GIT_MUX_NEW_WORKTREE
    fi

    # Attach, switch, or send keys to the new task
    if [ -n "$3" ]; then
        shift 2
        log "INFO " "task > executing command (not attaching/switching tmux windows): \"$*\""
        tmux send-keys -t "$GIT_MUX_CURRENT_PROJECT:$task_name" "$*" Enter
    elif [ -n "$TMUX" ]; then
        log "INFO " "task > switching tmux client"
        tmux switch-client -t "$GIT_MUX_CURRENT_PROJECT:$task_name"
    else
        log "INFO " "task > attaching to tmux session"
        tmux attach -t "$GIT_MUX_CURRENT_PROJECT:$task_name"
    fi

    unset task_name task_dir
}

# The logic that handles the git portion of the 'task' command.
# See handle_task documentation above for more info.
handle_git_task() {
    task_start_dir="$(find_project_directory)"

    cd "$task_start_dir" || return 1

    if is_git_root_dir "$task_start_dir"; then
        log "DEBUG" "task > git > found the root directory of the project: $task_start_dir"

        if [ -n "$1" ]; then
            task_branch="$1"
            shift
            log "DEBUG" "task > git > branch provided as argument: $task_branch"

            if ! git show-ref --verify --quiet "refs/heads/$task_branch"; then
                log "DEBUG" "task > git > branch not found and will be created"
                task_branch_flags="-b"

                # add the prifix if the new branch name doesn't already contain a '/'
                if [ -n "$GIT_MUX_BRANCH_PREFIX" ] && [ "${task_branch#*"/"}" = "$task_branch" ]; then
                    task_branch="$GIT_MUX_BRANCH_PREFIX/$task_branch"
                    log "DEBUG" "task > added prefix to the argument resulting in the branch name: $task_branch"
                fi
            fi
        else
            task_branch=$(select_branch)
            log "DEBUG" "task > git > branch selected interactively: $task_branch"
        fi

        task_name="$(sanitize_name "$task_branch")"
        log "DEBUG" "task > tmux window name: $task_name"

        # naively assumes a bare repo will be using worktrees
        if is_git_bare_repo_root; then
            log "DEBUG" "task > git > project is bare repo, using git-worktree"

            task_start_dir="$task_start_dir/$task_name"
            log "DEBUG" "task > git > worktree directory: $task_start_dir"

            if [ ! -d "$task_start_dir" ]; then
                log "INFO " "task > git > the worktree for branch \"$task_branch\" does not exist, creating it now"

                # shellcheck disable=2086
                git worktree add $task_name $task_branch_flags $task_branch >&2
                GIT_MUX_NEW_WORKTREE="1"
            fi
        else
            log "WARN" "task > git > repo is not using worktrees, checking out branch instead: \"$task_branch\""
            # shellcheck disable=2086
            git checkout $task_branch_flags $task_branch >&2
        fi

        handle_task "$task_start_dir" \
            "${task_name:-$(sanitize_name "$task_branch")}" "$*"
    fi

    unset task_start_dir task_name task_branch task_branch_flags
}

# --------------------------------------------------------------------- }}}
# Parse arguments                                                       {{{
# --------------------------------------------------------------------- {|}

main() {
    command="$1"
    if [ -z "$command" ]; then
        error "a command is required"
    fi
    shift

    case $command in
        config) config_values >&2 && exit 0 ;; # @internal
        help | --help) man git-mux ;;
        h | -h) help ;;
        v | -v | version | --version) printf "%s\n" "$GIT_MUX_VERSION" ;;
        c | -c | clone | --clone) bare_clone "$@" ;;
        p | -p | project | --project) handle_project "$@" ;;
        t | -t | task | --task) handle_task "$@" ;;
        *) error "invalid command: \"$command\"" ;;
    esac
}

# --------------------------------------------------------------------- }}}

log "INFO " "START > args: $*"

main "$@"
